# # write a python function to find the max of three numbers# def max_elem(x, y, z):#     if x > y and x > z:#         return x#     elif y > x and y > z:#         return y#     else:#         return z### print(max_elem(2, 3, 5))### # write a python function to sum all the numbers in a list# def sum(numbers):#     total = 0#     for x in numbers:#         total += x#     return total### print(sum((1, 2, 3, 4, 5)))### # write a python program to multiply all the numbers in a list# def mult(numbers):#     total = 1#     for x in numbers:#         total *= x#     return total### print(mult((1, 2, 3, 4, 5, 6)))### # write a python program to reverse a string# def factorial(n):#     if n == 0:#         return 1#     else:#         return n * factorial(n - 1)### n = int(input('enter number: '))# print(factorial(n))### # write a python function to check whether a number is in a given range# def find(x):#     if x in range(1, 10):#         return True#     return False### print(find(4))### # write a python function that accepts a string and calculate the number of upper case letters and lower case letters# def string_test(s):#     d = {'UPPER_CASE': 0, 'LOWER_CASE': 0}#     for x in s:#         if x.isupper():#             d['UPPER_CASE'] += 1#         elif x.islower():#             d['LOWER_CASE'] += 1#         else:#             pass#     print('original string: ', s)#     print("NO.Upper case letter: ", d['UPPER_CASE'])#     print('NO.lower case letters: ', d['LOWER_CASE'])### string_test('Hello DARKNESS my Old  friend')### # write a python function that takes a list and returns# def unique_list(lose):#     x = []#     for i in lose:#         if i not in x:#             x.append(i)#     return x### print(unique_list([1, 1, 2, 2, 3, 3, 4, 5, 5, 6]))### # write a python function that takes only prime numbers# def test_num(n):#     if n == 1:#         return False#     elif n == 2:#         return True#     else:#         for x in range(2, n):#             if n % x == 0:#                 return False#         return True### print(test_num(9))### # write a python program to print the even numbers from a given list# def even_num(l):#     x = []#     for i in l:#         if i % 2 == 0:#             x.append(i)#     return x### print(even_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))# # function that takes a sequence of numbers and determines whether all are different from each other# def test_num(data):#     if len(data) == len(set(data)):#         return True#     else:#         return False### print(test_num([1, 2, 3, 3, 4, 5]))# print(test_num([1, 0, 3, 2, 4]))# class Dog():#     def __init__(self, breed, name, spot):#         self.breed = breed#         self.name = name#         self.spot = spot### my_dog = Dog(breed='lab', name='silly', spot=False)# print(my_dog.name)# def encrypt():#     text = input('Enter text to encrypt: ')#     k = int(input('Enter k: '))##     result = ''##     for i in text:#         temp = ord(i) + k#         if temp > 122:#             temp -= 26#         result += chr(temp)#     return result### def decrypt():#     text = input('Enter text to decrypt: ')#     k = int(input('Enter k: '))##     result = ''##     for i in text:#         temp = ord(i) + k#         if temp < 97:#             temp += 26#         result += chr(temp)#     return result### print(decrypt())############################################## class Node:#     def __init__(self, data):#         self.data = data#         self.next = None### class LinkedList:#     def __init__(self):#         self.head = None##     def is_empty(self):#         return self.head is None##     def traverse(self):#         e = self.head##         while e is not None:#             print(e.data)#             e = e.next##     def add_after(self, x):#         e = self.head##         node = Node(x)##         if e is None:#             self.head = node#         else:#             while True:#                 if e.next is None:#                     e.next = node#                     return#                 e = e.next##     def add_front(self, x):#         node = Node(x)#         node.next = self.head#         self.head = node##     def search(self, x):#         e = self.head##         while e is not None:#             if e.data == x:#                 print('Found')#                 break#             e = e.next#         else:#             print('Not found')##     def add_after_node(self, x, y):#         e = self.head#         while e is not None:#             if e.data == x:#                 node = Node(y)#                 node.next = e.next#                 e.next = node#                 break#             e = e.next#         else:#             print('Not found')##     def remove(self, x):#         if self.head.data == x:#             temp = self.head#             self.head = self.head.next#             del temp#             return##         e = self.head#         while e.next is not None:#             if e.next.data == x:#                 temp = e.next#                 e.next = e.next.next#                 del temp#                 break#             e = e.next#         else:#             print('Not found')### ll = LinkedList()## ll.traverse()## ll.add_after(5)# ll.add_after(10)# ll.add_after(15)## ll.traverse()# print('-' * 10)#z# ll.traverse()## # list comprehension# a = {x for x in 'abracadabra' if x not in 'abc'}# print(a)